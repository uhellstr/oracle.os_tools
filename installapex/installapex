#!/usr/bin/env python
# coding: UTF-8

r"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#                                
#    _    ____  _______  __
#   / \  |  _ \| ____\ \/ /
#  / _ \ | |_) |  _|  \  / 
# / ___ \|  __/| |___ /  \ 
#/_/   \_\_|   |_____/_/\_\install
#   
# The "r" on row 4 is there to make this comment
# in raw format so that pylint not complains 
# about strange characters within this comment :-)
# Do not remove the leading "r"!!
#
#               Install APEX release X in Oracle Multitenant environment.
#               * Requires Oracle 12c instant client or higher
#               * ansible should be installed
#               * Python 2.7 or higher with cx_Oracle module installed
#               By Ulf Hellstrom,oraminute@gmail.com , EpicoTech 2019
#
#               How to use THE SHORT VERSION:
#
#               1. Check hosts file so hosts match your ssh configuration
#               2. Check apex_config.cfg 
#               3. Run apexinstall as $ ./apexinstall in a copied directory of this gitrepo (See README)
#               4. Output produce logfile with current timestamp
#               
#               
#            
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""

from __future__ import print_function
from datetime import datetime
import subprocess
import sys
import getpass
import getopt
import base64
import os
import time
import ast

try:
    import ConfigParser
except ImportError:
    import configparser

# Import oraclepackage module
workingdir = os.getcwd()
orapackdir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '')) +"/"
sys.path.append(orapackdir)
from oraclepackage import oramodule

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    sql templates used for checking if objects already are in place or not.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
"""

sql_check_apex="""
select count(*) from dba_registry
where comp_id = 'APEX'
"""

sql_check_apex_ver="""
select nvl(status,'0') as status,nvl(version,'0') as version from dba_registry
where comp_id = 'APEX'
"""

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Logger()
    Logfunction that logs all output to screen to logfile.
    Author: Ulf Hellstrom, oraminute@gmail.com
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
class Logger(object):
    def __init__(self):
        logfile = datetime.now().strftime('apex_install_%Y_%m_%d_%H_%M.log')
        self.terminal = sys.stdout
        self.log = open(logfile, "a")

    def write(self, message):
        self.terminal.write(message)
        self.log.write(message)  

    def flush(self):
        #this flush method is needed for python 3 compatibility.
        #this handles the flush command by doing nothing.
        #you might want to specify some extra behavior here.
        pass

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    newest()
    Finds the latest created file in a directory
    Author: Ulf Hellstrom, oraminute@gmail.com
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
"""
def newest(path):
    files = os.listdir(path)
    paths = [os.path.join(path, basename) for basename in files]
    return max(paths, key=os.path.getctime)

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   run_ansible()
   Shell callout running ansible playbook
   Author: Ulf Hellstrom, oraminute@gmail.com
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
def run_ansible(port):
    output = subprocess.call(["ansible-playbook ./collect.yml -i ./hosts -e ansible_ssh_port="+port],shell=True)
    print(output)
    output = subprocess.call(["./output.sh"],shell=True)
    print(output)

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
gen_apex_sql_script
Function that returns SQL to run in SQL*PLUS to install APEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
def gen_apex_sql_script(db_name,pdb_name,username,pwd,image_path):

    if pdb_name == "<12":
        templatescript = ("connect "+username+"/"+pwd+"@"+db_name+" as SYSDBA"+"\n"+
                          "@apexins SYSAUX SYSAUX TEMP " +image_path+"\n"
                          "exit")
    else:                          
        templatescript=("connect "+username+"/"+pwd+"@"+db_name+" as SYSDBA"+"\n"+
                        "alter session set container="+pdb_name+";"+"\n"+
                        "@apexins SYSAUX SYSAUX TEMP " +image_path+"\n"
                        "exit")    
    
    return templatescript

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    gen_apex_rest_config_sql_script
    Function that returns SQL to run in SQL*PLUS to install APEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
def gen_apex_rest_config_sql_script(db_name,pdb_name,username,pwd,apex_listener_pwd,apex_rest_public_user_pwd):

    if pdb_name == "<12c":
        templatescript=("connect "+username+"/"+pwd+"@"+db_name+" as SYSDBA"+"\n"+
                        "@apex_rest_config_core.sql @ "+apex_listener_pwd.upper()+" "+apex_rest_public_user_pwd.upper()+"\n"+
                        "exit")
    else:                       
        templatescript=("connect "+username+"/"+pwd+"@"+db_name+" as SYSDBA"+"\n"+
                        "alter session set container="+pdb_name+";"+"\n"+
                        "@apex_rest_config_core.sql @ "+apex_listener_pwd.upper()+" "+apex_rest_public_user_pwd.upper()+"\n"+
                        "exit")    
    
    return templatescript

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    gen_apex_users_pwd_sql_script
    Generate SQL to alter APEX_LISTENER, APEX_PUBLIC_USER and APEX_REST_PUBLIC_USER pwd's
    Author: Ulf Hellstrom, oraminute@gmail.com
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""    
def gen_apex_users_pwd_sql_script(db_name,pdb_name,username,pwd,apex_listener_pwd,apex_rest_public_user_pwd,apex_public_user_pwd):

    if pdb_name == "<12c":
        templatescript = ("connect "+username+"/"+pwd+"@"+db_name+" as SYSDBA"+"\n"+
                          "alter user APEX_LISTENER identified by "+apex_listener_pwd+" account unlock \n"+
                          "alter user APEX_REST_PUBLIC_USER identified by "+apex_rest_public_user_pwd+" account unlock\n"+
                          "alter user APEX_PUBLIC_USER identified by "+apex_public_user_pwd+" account unlock\n"    
                          "exit")
    else:                      
        templatescript = ("connect "+username+"/"+pwd+"@"+db_name+" as SYSDBA"+"\n"+
                          "alter session set container="+pdb_name+";"+"\n"+
                          "alter user APEX_LISTENER identified by "+apex_listener_pwd+"\n"+
                          "alter user APEX_REST_PUBLIC_USER identified by "+apex_rest_public_user_pwd+" account unlock\n"+
                          "alter user APEX_PUBLIC_USER identified by "+apex_public_user_pwd+" account unlock\n"    
                          "exit")

    return templatescript


"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    install_apex_rest_config
    Starting with APEX 5 you must install apex_rest_config.sql if running with ORDS
    Author: Ulf Hellstrom, oraminute@gmail.com
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
def install_apex_rest_config(db_name,val,user,apex_path,apex_image_path,apex_listener_pwd,apex_rest_public_user_pwd,apex_public_user_pwd):

    print("Verifying APEX_LISTENER,APEX_PUBLIC_USER and APEX_REST_PUBLIC_USER")
    sql_script = gen_apex_users_pwd_sql_script(db_name,val,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')).decode('ascii'),apex_listener_pwd,apex_rest_public_user_pwd,apex_public_user_pwd)
    sqlplus_output = oramodule.run_sqlplus(sql_script)
 
"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    install_apex
    Install apex and run rest_apex_config if not installed or wrong version
    Author: Ulf Hellstrom, oraminute@gmail.com
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
def install_apex(db_name,val,user,apex_path,apex_image_path,apex_listener_pwd,apex_rest_public_user_pwd,apex_public_user_pwd):
    
    start_time = time.time()
    #install APEX
    sql_script = gen_apex_sql_script(db_name,val,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')).decode('ascii'),apex_image_path)
    sqlplus_output = oramodule.run_sqlplus(sql_script)
    #Debug output below if needed
    # print(sqlplus_output)
    elapsed_time = time.time() - start_time
    print(time.strftime("%H:%M:S", time.gmtime(elapsed_time)))
    latest_apex_install_log = newest(apex_path)
    print("Installing apex_rest_config")
    sql_script = gen_apex_rest_config_sql_script(db_name,val,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')).decode('ascii'),apex_listener_pwd,apex_rest_public_user_pwd)
    #print(sql_script)
    sqlplus_output = oramodule.run_sqlplus(sql_script)
    #print(sqlplus_output)
    print("Apex installed please check " + latest_apex_install_log +" for any errors")

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    installer_main
    Method that does all the heavy lifting.
    Author: Ulf HellstrÃ¶m, oraminute@gmail.com
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
def installer_main(db_name,tns,port,use_dns,dns_connect,pdb_name,user,apex_release,apex_path,apex_image_path,workingdir,apex_listener_pwd,apex_rest_public_user_pwd,apex_public_user_pwd):

    # Check if apex is installed or not and if installed version.
    apex_installed = oramodule.check_if_object_exists(db_name,tns,port,use_dns,dns_connect,pdb_name,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')).decode('ascii'),'APEX',sql_check_apex)
    if apex_installed is not "ERROR":
        if int(apex_installed[0]) == 0:
            print("Apex not installed installing...")
            os.chdir(apex_path)
            install_apex(db_name,pdb_name,user,apex_path,apex_image_path,apex_listener_pwd,apex_rest_public_user_pwd,apex_public_user_pwd)
            #install_apex_rest_config(db_name,pdb_name,user,apex_path,apex_image_path,apex_listener_pwd,apex_rest_public_user_pwd)
            os.chdir(workingdir)                                
        else:
            print("Apex installed checking version")
            apex_ver = oramodule.check_if_object_exists(db_name,tns,port,use_dns,dns_connect,pdb_name,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')).decode('ascii'),'APEX',sql_check_apex_ver)
            print("Apex version installed",apex_ver[1])
            installed_ver = int(apex_ver[1].split('.')[0])
            expected_ver = int(apex_release.split('.')[0])
            print("installed_ver: ",installed_ver)
            print("expected_ver :",expected_ver)
            if installed_ver < expected_ver:
                os.chdir(apex_path)
                print("Installing Apex version: ",apex_release)
                install_apex(db_name,pdb_name,user,apex_path,apex_image_path,apex_listener_pwd,apex_rest_public_user_pwd,apex_public_user_pwd)
                #install_apex_rest_config(db_name,pdb_name,user,apex_path,apex_image_path,apex_listener_pwd,apex_rest_public_user_pwd)
                os.chdir(workingdir)
            else:
                print("Correct APEX version already installed")
                os.chdir(apex_path)
                install_apex_rest_config(db_name,pdb_name,user,apex_path,apex_image_path,apex_listener_pwd,apex_rest_public_user_pwd,apex_public_user_pwd)
                os.chdir(workingdir)                                        
    else:
        print("Error trying to connect to database.")            

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Main starts here. Eg this is where we run the code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
def main():
    # Enable logging output to log file
    sys.stdout = Logger()
    # Load configuration
    # configparser checks against python2 and python
    if sys.version_info[0] < 3:
        config = ConfigParser.ConfigParser()
        config.readfp(open(r'apex_config.cfg'))
    else:
        config = configparser.ConfigParser()
        config.read('apex_config.cfg')
    #Setup configparameters for connecting to Oracle
    use_dns = config.get('oraconfig','use_dns')
    dns_connect = config.get('oraconfig','dns_connect')
    tns = config.get('oraconfig','tns')
    port = config.get('oraconfig','port')
    ssh_port = config.get('oraconfig','ssh_port')
    stop_list = ast.literal_eval(config.get('oraconfig','stop_list'))
    apex_release = config.get('oraconfig','apex_ver')
    apex_image_path = config.get('oraconfig','apex_image_path')
    apex_path = config.get('oraconfig','apex_path')
    apex_listener_pwd = config.get('oraconfig','apex_listener_pwd')
    apex_rest_public_user_pwd = config.get('oraconfig','apex_rest_public_user_pwd')
    apex_public_user_pwd = config.get('oraconfig','apex_public_user_pwd')
    print("current directory is : " + workingdir)
    print("apex installation directory is: " + apex_path)
    #Run ansible script 
    run_ansible(ssh_port)
    os.system('cls' if os.name == 'nt' else 'clear') 
     # Get oracle user name (SYS,DBINFO)
    print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
    print("Give Oracle Username (SYS)>")
    if sys.version_info[0] < 3:
        user = raw_input("Oracle Username: ")
    else:
        user = input("Oracle Username: ")
    # Get password and encrypt it
    pwd = getpass.getpass(prompt="Please give " +user + " password: ")
    pwd =  base64.urlsafe_b64encode(pwd.encode('UTF-8)')).decode('ascii')
    os.environ["DB_INFO"] = pwd
    # inlist of cdbs from ansile-playbook sar-orause-test.sh
    file_list = ['cdb.log']
    # For each database loop over and check if we have standalone or multitenant
    # Different routes depending on db is standalone or cdb with pdb's.
    for val in file_list:
        input_file = open(val,'r')
        for line in input_file:
            db_name = line.rstrip()
            print('Stop inlist include following:',stop_list)
            if db_name in stop_list:
                print('No setup for database ',db_name)
            else:
                print(db_name)
                # Check the version of Oracle. Less then 12 then no Multitenant option
                ver = oramodule.get_version_info(db_name,tns,port,use_dns,dns_connect,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')).decode('ascii'))
                if ver is not "ERROR":
                    if ver < 12: 
                        # No Multitenant
                        print("Version of Oracle is less then 12 so no Multitenant option")
                        installer_main(db_name,tns,port,use_dns,dns_connect,"<12c",user,apex_release,apex_path,apex_image_path,workingdir,apex_listener_pwd,apex_rest_public_user_pwd,apex_public_user_pwd)
                    else: # Oracle version > 11    
                        # Get Pluggable databases that are mounted in a Container database (CDB)
                        list_of_dbs = oramodule.get_pdbs(db_name,tns,port,use_dns,dns_connect,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')).decode('ascii'))
                        for val in list_of_dbs:
                            print(val)
                            # Check that plug not in stoplist
                            if val not in stop_list:
                                if oramodule.check_if_pdb_is_open(db_name,tns,port,use_dns,dns_connect,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')),val):
                                    # Check that PDB is not Application Container
                                    if not oramodule.check_if_pdb_is_appcon(db_name,tns,port,use_dns,dns_connect,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')),val):
                                        # Check that PDB is not Apllication Container root clone
                                        if not oramodule.check_if_pdb_is_application_root_clone(db_name,tns,port,use_dns,dns_connect,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')),val):
                                            installer_main(db_name,tns,port,use_dns,dns_connect,val,user,apex_release,apex_path,apex_image_path,workingdir,apex_listener_pwd,apex_rest_public_user_pwd,apex_public_user_pwd)
                                        else:
                                            print('Not installing APEX in Application Container root clone '+val)
                                    else:
                                        print('Not installinga APEX in Application container '+val)            
                                else:
                                    print('Pluggable database '+val+' is not open, not installing APEX!')  
                            else:
                                print('Not installing APEX in:',val)                       

if __name__ == "__main__":
    main()