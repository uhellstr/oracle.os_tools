#!/usr/bin/env python3
# coding: UTF-8

from __future__ import print_function
from datetime import datetime
import subprocess
import sys
import getpass
import getopt
import base64
import os
import time
import ast
try:
    import ConfigParser
except ImportError:
    import configparser

# Import oraclepackage module
workingdir = os.getcwd()
orapackdir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '')) +"/"
sys.path.append(orapackdir)
from oraclepackage import oramodule


"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    sql templates used for checking if objects already are in place or not.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
"""

sql_check_apex="""
select count(*) from dba_registry
where comp_id = 'APEX'
"""

sql_check_apex_ver="""
select nvl(status,'0') as status,nvl(version,'0') as version from dba_registry
where comp_id = 'APEX'
"""

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Logger()
    Logfunction that logs all output to screen to logfile.
    Author: Ulf Hellstrom, oraminute@gmail.com
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
class Logger(object):
    def __init__(self):
        logfile = datetime.now().strftime('apexchpwd_%Y_%m_%d_%H_%M.log')
        self.terminal = sys.stdout
        self.log = open(logfile, "a")

    def write(self, message):
        self.terminal.write(message)
        self.log.write(message)  

    def flush(self):
        #this flush method is needed for python 3 compatibility.
        #this handles the flush command by doing nothing.
        #you might want to specify some extra behavior here.
        pass

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   run_ansible()
   Shell callout running ansible playbook
   Author: Ulf Hellstrom, oraminute@gmail.com
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
def run_ansible(port):
    output = subprocess.call(["ansible-playbook ./collect.yml -i ./hosts -e ansible_ssh_port="+port],shell=True)
    print(output)
    output = subprocess.call(["./output.sh"],shell=True)
    print(output)

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
gen_apex_sql_script
Function that returns SQL to run in SQL*PLUS to change admin password
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
def gen_apex_sql_script(schema,admin_user,admin_mail,admin_pwd,db_name,pdb_name,username,pwd):

    if pdb_name == "<12c":
        templatescript=("connect "+username+"/"+pwd+"@"+db_name+" as SYSDBA"+"\n"+
                        "col user_id       noprint new_value M_USER_ID"+"\n"+
                        "col email_address noprint new_value M_EMAIL_ADDRESS"+"\n"+
                        "set termout off"+"\n"+
                        "select rtrim(min(user_id))       user_id,"+"\n"+
                        "nvl ("+"\n"+
                        "rtrim(min(email_address)),"+"\n"+
                        "'ADMIN' )        email_address"+"\n"+
                        "from "+schema+".wwv_flow_fnd_user"+"\n"+
                        "where security_group_id = 10"+"\n"+
                        "and user_name  = upper('"+admin_user+"')"+"\n"+
                        "/"+"\n"+
                        "set termout on"+"\n"+
                        "begin"+"\n"+
                        "  if length('&M_USER_ID.') > 0 then"+"\n"+
                        "    sys.dbms_output.put_line('User "+admin_user+" exists.');"+"\n"+
                        "  else"+"\n"+
                        "    sys.dbms_output.put_line('User "+admin_user+" does not yet exist and will be created.');"+"\n"+
                        "  end if;"+"\n"+
                        "end;"+"\n"+
                        "/"+"\n"+
                        "declare"+"\n"+
                        "  c_user_id  constant number         := to_number( '&M_USER_ID.' );"+"\n"+
                        "  c_username constant varchar2(4000) := upper( '"+admin_user+"' );"+"\n"+
                        "  c_email    constant varchar2(4000) := '"+admin_mail+"';"+"\n"+
                        "  c_password constant varchar2(4000) := '"+admin_pwd+"';"+"\n"+
                        "  c_old_sgid constant number :="+schema+".wwv_flow_security.g_security_group_id;"+"\n"+
                        "  c_old_user constant varchar2(255) := "+schema+".wwv_flow_security.g_user;"+"\n"+
                        "procedure cleanup"+"\n"+
                        "is"+"\n"+
                        "begin"+"\n"+
                        "  "+schema+".wwv_flow_security.g_security_group_id := c_old_sgid;"+"\n"+
                        "  "+schema+".wwv_flow_security.g_user              := c_old_user;"+"\n"+
                        "end cleanup;"+"\n"+
                        "begin"+"\n"+
                        "  "+schema+".wwv_flow_security.g_security_group_id := 10;"+"\n"+
                        "  "+schema+".wwv_flow_security.g_user              := c_username;"+"\n"+
                        "  "+schema+".wwv_flow_fnd_user_int.create_or_update_user( p_user_id  => c_user_id,"+"\n"+
                        "                                               p_username => c_username,"+"\n"+
                        "                                               p_email    => c_email,"+"\n"+
                        "                                               p_password => c_password );"+"\n"+
                        "commit;"+"\n"+
                        "cleanup();"+"\n"+
                        "exception"+"\n"+
                        "when others then"+"\n"+
                        "  cleanup();"+"\n"+
                        "   raise;"+"\n"+
                        "end;"+"\n"+
                        "/"+"\n"+                   
                        "exit")
    else:
        # We are running 12c or above
        templatescript=("connect "+username+"/"+pwd+"@"+db_name+" as SYSDBA"+"\n"+
                        "alter session set container="+pdb_name+";"+"\n"+
                        "col user_id       noprint new_value M_USER_ID"+"\n"+
                        "col email_address noprint new_value M_EMAIL_ADDRESS"+"\n"+
                        "set termout off"+"\n"+
                        "select rtrim(min(user_id))       user_id,"+"\n"+
                        "nvl ("+"\n"+
                        "rtrim(min(email_address)),"+"\n"+
                        "'ADMIN' )        email_address"+"\n"+
                        "from "+schema+".wwv_flow_fnd_user"+"\n"+
                        "where security_group_id = 10"+"\n"+
                        "and user_name  = upper('"+admin_user+"')"+"\n"+
                        "/"+"\n"+
                        "set termout on"+"\n"+
                        "begin"+"\n"+
                        "  if length('&M_USER_ID.') > 0 then"+"\n"+
                        "    sys.dbms_output.put_line('User "+admin_user+" exists.');"+"\n"+
                        "  else"+"\n"+
                        "    sys.dbms_output.put_line('User "+admin_user+" does not yet exist and will be created.');"+"\n"+
                        "  end if;"+"\n"+
                        "end;"+"\n"+
                        "/"+"\n"+
                        "declare"+"\n"+
                        "  c_user_id  constant number         := to_number( '&M_USER_ID.' );"+"\n"+
                        "  c_username constant varchar2(4000) := upper( '"+admin_user+"' );"+"\n"+
                        "  c_email    constant varchar2(4000) := '"+admin_mail+"';"+"\n"+
                        "  c_password constant varchar2(4000) := '"+admin_pwd+"';"+"\n"+
                        "  c_old_sgid constant number :="+schema+".wwv_flow_security.g_security_group_id;"+"\n"+
                        "  c_old_user constant varchar2(255) := "+schema+".wwv_flow_security.g_user;"+"\n"+
                        "procedure cleanup"+"\n"+
                        "is"+"\n"+
                        "begin"+"\n"+
                        "  "+schema+".wwv_flow_security.g_security_group_id := c_old_sgid;"+"\n"+
                        "  "+schema+".wwv_flow_security.g_user              := c_old_user;"+"\n"+
                        "end cleanup;"+"\n"+
                        "begin"+"\n"+
                        "  "+schema+".wwv_flow_security.g_security_group_id := 10;"+"\n"+
                        "  "+schema+".wwv_flow_security.g_user              := c_username;"+"\n"+
                        "  "+schema+".wwv_flow_fnd_user_int.create_or_update_user( p_user_id  => c_user_id,"+"\n"+
                        "                                               p_username => c_username,"+"\n"+
                        "                                               p_email    => c_email,"+"\n"+
                        "                                               p_password => c_password );"+"\n"+
                        "commit;"+"\n"+
                        "cleanup();"+"\n"+
                        "exception"+"\n"+
                        "when others then"+"\n"+
                        "  cleanup();"+"\n"+
                        "   raise;"+"\n"+
                        "end;"+"\n"+
                        "/"+"\n"+                   
                        "exit")    
    
    return templatescript

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    installer_main()
    Main method setup password for APEX
    AUthor: Ulf Hellstrom, oraminute@gmail.com
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""    
def installer_main(db_name,tns,port,use_dns,dns_connect,val,user,apex_release,apex_schema,apex_admin_user,apex_admin_mail,apex_admin_pwd):
    
    # Check if apex is installed or not and if installed version.
    apex_installed = oramodule.check_if_object_exists(db_name,tns,port,use_dns,dns_connect,val,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')).decode('ascii'),'APEX',sql_check_apex)
    if apex_installed is not "ERROR":
        if int(apex_installed[0]) == 0:
            print("Apex not installed PLEASE RUN apexinstall in this directory!")
        else:
            print("Apex installed checking version")
            apex_ver = oramodule.check_if_object_exists(db_name,tns,port,use_dns,dns_connect,val,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')).decode('ascii'),'APEX',sql_check_apex_ver)
            print("Apex version installed",apex_ver[1])
            installed_ver = int(apex_ver[1].split('.')[0])
            expected_ver = int(apex_release.split('.')[0])
            print("installed_ver: ",installed_ver)
            print("expected_ver :",expected_ver)
            if installed_ver < expected_ver:
                print("Incorrect version of APEX please run apexinstall in this directory! ",apex_release)
            else:
                print("Correct version installed setting admin password")
                start_time = time.time()
                sql_script = gen_apex_sql_script(apex_schema,apex_admin_user,apex_admin_mail,apex_admin_pwd,db_name,val,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')).decode('ascii'))
                sqlplus_output = oramodule.run_sqlplus(sql_script)
                #for line in sqlplus_output:
                #    print(line)                                    
                elapsed_time = time.time() - start_time
                print(time.strftime("%H:%M:%S", time.gmtime(elapsed_time)))

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Main starts here. Eg this is where we run the code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
def main():
    # Enable logging output to log file
    sys.stdout = Logger()
    # Load configuration
    # configparser checks against python2 and python
    if sys.version_info[0] < 3:
        config = ConfigParser.ConfigParser()
        config.readfp(open(r'apex_config.cfg'))
    else:
        config = configparser.ConfigParser()
        config.read('apex_config.cfg')
    #Setup configparameters for connecting to Oracle
    use_dns = config.get('oraconfig','use_dns')
    dns_connect = config.get('oraconfig','dns_connect')
    tns = config.get('oraconfig','tns')
    port = config.get('oraconfig','port')
    ssh_port = config.get('oraconfig','ssh_port')
    stop_list = ast.literal_eval(config.get('oraconfig','stop_list'))
    apex_release = config.get('oraconfig','apex_ver')
    apex_schema = config.get('oraconfig','apex_schema')
    apex_admin_user = config.get('oraconfig','apex_admin_user')
    apex_admin_mail = config.get('oraconfig','apex_admin_mail')
    apex_admin_pwd = config.get('oraconfig','apex_admin_pwd')
    #Run ansible script
    os.system('cls' if os.name == 'nt' else 'clear') 
    run_ansible(ssh_port)
     # Get oracle user name (SYS,DBINFO)
    if sys.version_info[0] < 3:
        user = raw_input("Oracle Username: ")
    else:
        user = input("Oracle Username: ")
    # Get password and encrypt it
    pwd = getpass.getpass(prompt="Please give " +user + " password: ")
    pwd =  base64.urlsafe_b64encode(pwd.encode('UTF-8)')).decode('ascii')
    os.environ["DB_INFO"] = pwd
    # inlist of cdbs from ansile-playbook sar-orause-test.sh
    file_list = ['cdb.log']
    # For each database loop over and check if we have standalone or multitenant
    # Different routes depending on db is standalone or cdb with pdb's.
    for val in file_list:
        input_file = open(val,'r')
        for line in input_file:
            db_name = line.rstrip()
            print('Stop inlist include following:',stop_list)
            if db_name in stop_list:
                print('No setup for database ',db_name)
            else:
                print(db_name)
                # Get Pluggable databases that are mounted in a Container database (CDB)
                # Check the version of Oracle. Less then 12 then no Multitenant option
                ver = oramodule.get_version_info(db_name,tns,port,use_dns,dns_connect,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')).decode('ascii'))
                if ver is not "ERROR":
                    if ver < 12: 
                        # No Multitenant
                        print("Version of Oracle is less then 12 so no Multitenant option")
                        installer_main(db_name,tns,port,use_dns,dns_connect,"<12c",user,apex_release,apex_schema,apex_admin_user,apex_admin_mail,apex_admin_pwd)
                    else: # Multitenat 12c or above
                        list_of_dbs = oramodule.get_pdbs(db_name,tns,port,use_dns,dns_connect,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')).decode('ascii'))
                        for val in list_of_dbs:
                            print(val)
                            # Check that plug not in stoplist
                            if val not in stop_list:
                                installer_main(db_name,tns,port,use_dns,dns_connect,val,user,apex_release,apex_schema,apex_admin_user,apex_admin_mail,apex_admin_pwd)
                            else:
                                print('Not collecting data for:',val)
                else:
                    print("Error trying to get Oracle version!!!")

if __name__ == "__main__":
    main()