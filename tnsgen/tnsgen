#!/usr/bin/env python
# coding: UTF-8

r"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#  _                              
# | |_ _ __  ___  __ _  ___ _ __  
# | __| '_ \/ __|/ _` |/ _ \ '_ \  The "r" on row 4 is there to make this comment
# | |_| | | \__ \ (_| |  __/ | | | in raw format so that pylint not complains 
#  \__|_| |_|___/\__, |\___|_| |_| about strange characters within this comment :-)
#                |___/             Do not remove the leading "r"!!
#
#               Generate tnsnames.ora for Oracle serverside and client side
#               * Requires Oracle 12c instant client or higher
#               * ansible should be installed
#               * Python 2.7 or higher with cx_Oracle module installed
#               By Ulf Hellstrom,oraminute@gmail.com , EpicoTech 2019
#
#               How to use THE SHORT VERSION:
#
#               1. Check hosts file so hosts match your ssh configuration
#               2. Check tns_config.cfg 
#               3. Run tnsgen as $ ./tnsgen in a copied directory of this gitrepo (See README)
#               4. Output produce logfile and tnsname.ora_<date and timestamp>
#               5. Upload file to server if necessary.
#               6. Merge with you own local tnsnames.ora
#            
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""

from __future__ import print_function
from datetime import datetime
import subprocess
import sys
import getpass
import getopt
import base64
import os
import time
import glob
import ast

try:
    import ConfigParser
except ImportError:
    import configparser

# Import oraclepackage module
workingdir = os.getcwd()
orapackdir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '')) +"/"
sys.path.append(orapackdir)
from oraclepackage import oramodule

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    sql_service_names
    Function that returns sql to get all defined service names for a PDB
    Author: Ulf Hellstrom, oraminute@gmail.com
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
def sql_service_names():

    stmt = """
select pdb,
       upper(network_name) as network_name
from v$services
where network_name not like 'SYS$%'
order by network_name asc
"""

    return stmt

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    gen_tns_header
    Returns a header string for a tnsnames file
    Author: Ulf Hellstrom, oraminute@gmail.com
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
def gen_tns_header(header,cdb_header,pdb_header,cdb_name,pdb_name,tnsfile):
    
    if header is "true":
        tnsfile.write("##############################################################")
        tnsfile.write('\n')
        tnsfile.write("# tnsnames.ora Network Configuration File")
        tnsfile.write('\n')
        tnsfile.write("# Autogenerated "+datetime.now().strftime('%Y-%m-%d-%H-%M'))
        tnsfile.write('\n')
        tnsfile.write("##############################################################")
        tnsfile.write('\n')
        tnsfile.write('\n')  
        #tnsfile.write('##############################################################\n')
        #tnsfile.write('# Container:\n')
        #tnsfile.write('# Database: PROXY\n')
        #tnsfile.write('##############################################################\n')
        #tnsfile.write('\n')
        #tnsfile.write('SBPPX =\n')
        #tnsfile.write('(DESCRIPTION =\n')
        #tnsfile.write('  (ADDRESS = (PROTOCOL = TCP)(HOST = 10.251.103.104)(PORT = 1521))\n')
        #tnsfile.write('    (CONNECT_DATA =\n')
        #tnsfile.write('      (SERVER = DEDICATED)\n')
        #tnsfile.write('      (SERVICE_NAME = SBPPX)\n')
        #tnsfile.write('    )\n')
        #tnsfile.write('  )\n')
        #tnsfile.write('\n')    
   

    if cdb_header is "true":
        tnsfile.write("##############################################################")
        tnsfile.write('\n')
        tnsfile.write("# Container: "+cdb_name+" ")
        tnsfile.write('\n')
        tnsfile.write("##############################################################")
        tnsfile.write('\n')
        tnsfile.write('\n')    

    if pdb_header is "true":
        tnsfile.write("##############################################################")
        tnsfile.write('\n')
        tnsfile.write("# Container: "+cdb_name+" ")
        tnsfile.write('\n')
        tnsfile.write("# Plug:      "+pdb_name+" ")
        tnsfile.write('\n')
        tnsfile.write("##############################################################")
        tnsfile.write('\n')
        tnsfile.write('\n')    
            
"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    gen_tns_entry
    Returns a tnsentry
    Author: Ulf Hellstrom, oraminute@gmail.com    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
def gen_tns_entry(cluster_list,db_name,host,service,port,tnsfile):

    tnsfile.write(service.upper()+" = ")
    tnsfile.write('\n')
    tnsfile.write("(DESCRIPTION = ")
    tnsfile.write('\n')
    if oramodule.check_if_listener_is_cluster(cluster_list,host):
        print("We have a RAC cluster")
        failover_host = oramodule.get_failover_listener(cluster_list,host)
        print("Failover listener for " + host + " is "+failover_host)
        tnsfile.write("  (ADDRESS = (PROTOCOL = TCP)(HOST = "+host+")(PORT = "+port+"))")
        tnsfile.write('\n')
        tnsfile.write("  (ADDRESS = (PROTOCOL = TCP)(HOST = "+failover_host+")(PORT = "+port+"))")
    else:        
        print("Listener "+host+" does not have any failover listener")
        tnsfile.write("  (ADDRESS = (PROTOCOL = TCP)(HOST = "+host+")(PORT = "+port+"))")
    tnsfile.write('\n')
    tnsfile.write("    (CONNECT_DATA = ")
    tnsfile.write('\n')
    tnsfile.write("      (SERVER = DEDICATED)")
    tnsfile.write('\n')
    tnsfile.write("      (SERVICE_NAME = "+service+")")
    tnsfile.write('\n')
    tnsfile.write("    )")
    tnsfile.write('\n')
    tnsfile.write(")")
    tnsfile.write('\n')
    tnsfile.write('\n')

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Logger()
    Logfunction that logs all output to screen to logfile.
    Author: Ulf Hellstrom, oraminute@gmail.com
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
class Logger(object):
    def __init__(self):
        logfile = datetime.now().strftime('tnsgen_%Y_%m_%d_%H_%M.log')
        self.terminal = sys.stdout
        self.log = open(logfile, "a")

    def write(self, message):
        self.terminal.write(message)
        self.log.write(message)  

    def flush(self):
        #this flush method is needed for python 3 compatibility.
        #this handles the flush command by doing nothing.
        #you might want to specify some extra behavior here.
        pass
                
"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    get_latest_tns_file()
    Get the latest generated tnsnames.ora file to be used for ansible to copy to
    servers defined in ansible hosts file
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        
"""
def get_latest_tns_file(folder):
    
    files_path = os.path.join(folder,'tnsnames.*')
    files = sorted(glob.iglob(files_path), key=os.path.getctime, reverse=True)
    
    return files[0]

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    get_pdb_servicenames()
    Returns a inlist of servicenames defined for a PDB
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
def get_pdb_service_names(db_name,tns,port,use_dns,dns_connect,pdb_name,user,password):

    if use_dns.startswith('Y') or use_dns.startswith('y'):
        connection = oramodule.get_oracle_dns_connection(db_name,dns_connect,user,password)
    else:
        connection = oramodule.get_oracle_connection(db_name,tns,port,user,password)

    if not connection == "ERROR":
        
        if oramodule.check_pdb_mode(connection,pdb_name):

            try:
                print('Getting service names for Database Container: ' + db_name)
                c1str = 'alter session set container = ' + pdb_name
                print(c1str)
                c1 = connection.cursor()
                c1.execute(c1str)
            except cx_Oracle.DatabaseError as e:
                error, = e.args
                print(error.code)
                print(error.message)
                print(error.context)
            else:
                print('Connection successfull')
                sqlstr = sql_service_names()
                c2 = connection.cursor()
                c2.execute(sqlstr)
                for info in c2:
                    str = db_name + ','+ tns +','+','.join(info) # make tuple to string containging CDB,PDB,SERVICE
                    servicename_list.append(str)

                c1.close()
                c2.close()
                connection.close()
        else:
            print("************************************************************************")
            print("Pluggable databae " + pdb_name + " not open so skipping!")
            print("************************************************************************")
    else:
        print("Not collecting any data due to errors: ",db_name)

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Main starts here. Eg this is where we run the code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
def main():
    # set working directory
    workingdir = os.getcwd()
    # Load configuration
    # configparser checks against python2 and python
    if sys.version_info[0] < 3:
        config = ConfigParser.ConfigParser()
        config.readfp(open(r'../config/config.cfg'))
    else:
        config = configparser.ConfigParser()
        config.read('../config/config.cfg')
    #Setup configparameters for connecting to Oracle
    use_dns = config.get('oraconfig','use_dns')
    dns_connect = config.get('oraconfig','dns_connect')
    ssh_port = config.get('oraconfig','ssh_port')
    ssh_port_list = ast.literal_eval(config.get('oraconfig','ssh_alternative_port'))
    stop_list = ast.literal_eval(config.get('oraconfig','stop_list'))
    host_list = ast.literal_eval(config.get('oraconfig','hosts_tns'))
    cluster_list = ast.literal_eval(config.get('oraconfig','cluster'))
    # Check if user wants to performa a new ansible scan
    if oramodule.run_ansible_script(workingdir) is True:
        # Remove old cdb.log file if it exists
        if os.path.isfile(workingdir+"/cdb.log"):
            os.remove(workingdir+"/cdb.log")
        # Generate hosts file for ansible
        oramodule.gen_ansible_host_file(host_list,workingdir)
        # loop over hosts file and run playbooks for each node
        scan_list = oramodule.ret_scan_list(host_list)
        for val in scan_list:
            # Check if any node has an alternitive ssh port
            ssh_portno = oramodule.get_alternative_ssh_port(val,ssh_port_list,ssh_port)
            ansible_playbook = "collect-"+val+".yml"
            print(ansible_playbook)    
            #Run ansible script
            oramodule.run_ansible(ssh_portno,ansible_playbook,workingdir,val)
    else:
         scan_list = oramodule.ret_scan_list(host_list)       
    #os.system('cls' if os.name == 'nt' else 'clear')
    # Get oracle user name 
    userpwd_list = oramodule.gen_user_pwd_list(scan_list)
    # Enable logging output to log file
    sys.stdout = Logger()
    # inlist of cdbs from ansile-playbook
    input_file = open('cdb.log','r')
    for line in input_file:
        dbinfo = line.rstrip()
        db_name = oramodule.split_list(dbinfo,':',0)
        tns = oramodule.split_list(dbinfo,':',1)
        port = oramodule.get_tns_port(tns,host_list)
        print('Stop inlist include following:',stop_list)
        if db_name in stop_list:
            print('Not connecting or collecting ',db_name)
        else:
            print(db_name)
            user = oramodule.get_user(tns,userpwd_list)
            pwd = oramodule.get_pwd(tns,userpwd_list)
            os.environ["DB_INFO"] = pwd
            list_of_dbs = oramodule.get_pdbs(db_name,tns,port,use_dns,dns_connect,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')).decode('ascii'))
            for val in list_of_dbs:
                print(val)
                if val not in stop_list:
                    if not oramodule.check_if_pdb_is_application_root_clone(db_name,tns,port,use_dns,dns_connect,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')).decode('ascii'),val):
                        get_pdb_service_names(db_name,tns,port,use_dns,dns_connect,val,user,base64.urlsafe_b64decode(os.environ["DB_INFO"].encode('UTF-8')).decode('ascii'))
                else:
                    print('Not collecting data for:',val)

    input_file.close()

    #Use servicename_list to generate a new tnsnames.ora
    input_file = open('cdb.log','r')
    tns_file = "tnsnames.ora_"+datetime.now().strftime('%Y-%m-%d-%H-%M')
    output_file = open(tns_file,"a+")
    gen_tns_header("true","false","false","","",output_file)
    for line in input_file:
        dbinfo = line.rstrip()
        db_name = oramodule.split_list(dbinfo,':',0)
        if db_name in stop_list:
            print('Not connecting or collecting ',db_name)
        else:
            tns = oramodule.split_list(dbinfo,':',1)
            port = oramodule.get_tns_port(tns,host_list)
            gen_tns_header("false","true","false",db_name," ",output_file)
            gen_tns_entry(cluster_list,db_name,tns,db_name,port,output_file)

    input_file.close()
    # Back to normal plug databases.
    for val in servicename_list:
        # Split comma separated row in inlist to individual objects
        print("Debug information: Print data från service_name inlist")
        print(val)
        print("****************************************************")
        data = val.split(',')
        cdb_db = data[0]
        tns_entry = data[1]
        pdb_db = data[2]
        db_service = data[3]
        if cdb_db in stop_list:
            print("Not collecting data for "+cdb_db)
        else:
            # Avoid to add a db more then once to tnsnames.ora            
            if db_service not in tns_stop_list:
                gen_tns_header("false","false","true",cdb_db,pdb_db,output_file)
                gen_tns_entry(cluster_list,pdb_db,tns_entry,db_service,port,output_file)
                if pdb_db == db_service:
                    tns_stop_list.append(db_service)

    output_file.close()
    tnsfile = get_latest_tns_file(workingdir)
    print(tnsfile)

if __name__ == "__main__":
    use_dns = ''
    dns_connect = ''
    ssh_port = ''
    stop_list = []
    host_list = []
    cluster_list = []
    servicename_list = []
    tns_stop_list = []
    main()
